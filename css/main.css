/*****************************************************************************/
/*
/* Common
/*
/*****************************************************************************/
/* Global Reset */
* {
  margin: 0;
  padding: 0; }

html,
body {
  height: 100%; }

html {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

body {
  font: 18px Helvetica, Arial, sans-serif;
  background-color: black;
  text-rendering: optimizeLegibility; }

a,
button,
input {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  outline: none; }

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: 100%;
  font-weight: normal; }

h1,
p {
  margin-bottom: 1em; }

a,
a:hover,
a:visited {
  text-decoration: none; }

ul,
ol {
  list-style: none; }

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Perform a value into a percentage value.
 * @param {number} $value - The value which should be converted.
 * @returns {number} $value - The percentage.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column-width().
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-column-gutter().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Alias for j-span().
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-shift().
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * Alias for j-unshift().
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 * Aliases for j-edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Alias for j-center().
 */
/**
 * Uncenter an element.
 */
/**
 * Alias for j-uncenter().
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Alias for j-stack().
 */
/**
 * Unstack an element.
 */
/**
 * Alias for j-unstack().
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Alias for j-align().
 */
/**
 * Apply a clearfix to an element.
 */
/**
 * Alias for j-cf().
 */
/*****************************************************************************/
/*
/* Variables
/*
/*****************************************************************************/
/*****************************************************************************/
/*
/* Base Styles
/*
/*****************************************************************************/
body {
  font-family: "inconsolata", Georgia, Times, serif;
  font-size: 10.8px;
  line-height: 150%;
  color: #333;
  background: #fafafa;
  -webkit-text-size-adjust: 100%; }
  @media (min-width: 768px) {
    body {
      font-size: 18px; } }

.wrapper {
  max-width: 620px;
  margin: 0 1rem; }
  @media (min-width: 650px) {
    .wrapper {
      margin: 0 auto; } }

p {
  line-height: 135%; }

.header-img {
  width: 40%;
  height: auto; }
  @media (min-width: 700px) {
    .header-img {
      width: auto; } }

/*****************************************************************************/
/*
/* Modules
/*
/*****************************************************************************/
.header {
  margin-top: 8rem;
  margin-bottom: 4rem;
  text-align: center; }

.subheader--parenth {
  color: #00aeef; }

.about {
  margin-bottom: 4rem; }
  .about__header {
    margin-bottom: 1rem; }

/* Mailchimp Signup */
#mc_embed_signup_scroll {
  margin-top: 4rem; }

#mc_embed_signup form {
  padding: 0; }

#mc_embed_signup {
  font-family: "inconsolata", Georgia, Times, serif;
  background: transparent; }

input {
  font-family: "inconsolata", Georgia, Times, serif; }

#mc_embed_signup label,
input {
  font-size: 10.8px;
  font-weight: 500;
  text-align: center; }
  @media (min-width: 768px) {
    #mc_embed_signup label,
    input {
      font-size: 18px; } }

#mc_embed_signup input.email,
#mc_embed_signup input.button {
  margin: 0 auto; }

#mc_embed_signup input.button {
  margin-top: 0.66667rem;
  font-size: 10.8px;
  font-weight: 500;
  height: 2rem;
  background-color: #00aeef;
  transition: background-color 0.2s ease-in-out; }
  @media (min-width: 768px) {
    #mc_embed_signup input.button {
      font-size: 18px; } }
  #mc_embed_signup input.button:hover {
    background-color: #009bd5; }

.footer {
  padding-top: 2rem;
  padding-bottom: 1rem;
  color: #a2a2a2;
  background: #eeeeee; }
  .footer__desc,
  .footer__contact {
    display: inline-block; }
  .footer__contact {
    float: right;
    text-decoration: underline; }
    .footer__contact:hover {
      text-decoration: underline; }

/* Registration Marks */
.reg {
  display: none;
  position: fixed;
  z-index: 1001;
  opacity: 0.6; }
  @media (min-width: 768px) {
    .reg {
      display: block; } }
  .reg--upper-left,
  .reg--upper-right {
    top: 1rem; }
  .reg--lower-left,
  .reg--upper-left {
    left: 1rem; }
  .reg--lower-right,
  .reg--upper-right {
    right: 1rem; }
  .reg--lower-left,
  .reg--lower-right {
    bottom: 1rem; }

/****************************************************************
*****************************************************************
Modules
*****************************************************************
****************************************************************/
/* Featured Print */
.feature__wrapper,
.feature {
  box-sizing: border-box; }

.feature__wrapper {
  width: 100%;
  padding: 1rem 0;
  background-image: url("/content/bg-pattern_v1.png");
  background-color: #71a1c5; }

.feature {
  max-width: 1240px;
  margin: 0 auto;
  display: table;
  background: #fafafa; }

@media (min-width: 768px) {
  .feature__img-wrapper,
  .feature__text {
    display: table-cell; } }

.feature__img-wrapper {
  line-height: 0; }
  @media (min-width: 768px) {
    .feature__img-wrapper {
      float: left;
      clear: none;
      width: 33.33333%;
      margin-left: 0;
      margin-right: 0; } }

.feature__img {
  width: 100%;
  height: auto; }

.feature__text {
  padding-bottom: 2rem; }
  @media (min-width: 768px) {
    .feature__text {
      padding-bottom: 0;
      float: left;
      clear: none;
      width: 66.66667%;
      margin-left: 0;
      margin-right: 0; } }

.feature__label,
.feature__title,
.feature__stats,
.feature__counter,
.feature__footer {
  margin: 0.5rem 1rem;
  text-align: center; }

.feature__title {
  width: 80%;
  margin: 0 auto;
  font-family: "refrigerator-deluxe", Helvetica, Arial, sans-serif;
  font-weight: 300;
  font-size: 40px;
  line-height: 1; }
  @media (min-width: 1024px) {
    .feature__title {
      font-size: 72px; } }

.feature__artist,
.feature__counter {
  margin-bottom: 1rem; }
  @media (min-width: 1024px) {
    .feature__artist,
    .feature__counter {
      margin-bottom: 2rem; } }

.feature__stats,
.feature__btn {
  font-family: "effra", Helvetica, Arial, sans-serif;
  font-size: 16px;
  font-weight: 400;
  letter-spacing: 0.25px; }
  @media (min-width: 1024px) {
    .feature__stats,
    .feature__btn {
      font-size: 18px; } }

.feature__stats--em {
  font-weight: 500; }

.feature__counter-unit, .feature__counter-unit--full {
  box-sizing: border-box;
  display: inline-block;
  width: 10px;
  height: 10px;
  border: 2px solid #00aeef;
  background-color: #fafafa;
  border-radius: 5px; }

.feature__counter-unit--full {
  background-color: #00aeef; }

.feature__btn {
  padding: 0.33333rem 1rem;
  background-color: #ec008c;
  color: #fafafa;
  transition: background-color 100ms ease-in; }
  .feature__btn:hover,
  .feature__btn:focus {
    background-color: #ff20a4; }
  .feature__btn:active {
    background-color: #b9006e; }
